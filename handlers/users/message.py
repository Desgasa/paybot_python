
from aiogram import types
from aiogram.types.message import ContentType
from loader import dp
from app import db
from loader import bot
import logging


from config import config
from buttons import profile_buttons
from buttons import back_button
from buttons import sub_buttons
from cheaktime import timemenedger
from handlers.users import randompass

import random
import time 




@dp.message_handler()
async def messageprofile(message: types.Message):
        if message.text == "üë§ –ü–†–û–§–ò–õ–¨":
                user_sub = timemenedger.time_sub_day(db.get_time_sub(message.from_user.id))
                if user_sub == False:
                        user_sub = "No"
                        db.updape_status(message.from_user.id, False)
                        db.updape_time_sub(message.from_user.id, 0)

                result_username = db.username_exists(message.from_user.id)
                result_status = db.status_exists(message.from_user.id)
                username = result_username[0]
                status = result_status[0]        
                

                if status == 0: 
                        text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {username}",
                                "–£ –≤–∞—Å –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç")
                        await message.answer("\n".join(text))
                elif status == 1: 
                        text = (f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {username}",
                                f"–£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–∏—Å–∫–∞ –Ω–∞ –±–æ—Ç –µ—â—ë {user_sub}")
                        await message.answer("\n".join(text),reply_markup=back_button.backButton)
                elif username == None:
                        text = ("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ –±–æ—Ç–∞.",
                                "–î–ª—è —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º")
                        await message.answer("\n".join(text))
        elif message.text == "ü§ç –ü–û–î–ü–ò–°–ö–ê":
                await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ",reply_markup= sub_buttons.sub_markup)

        elif message.text == "‚Üê –ù–ê–ó–ê–î":
                result = db.username_exists(message.from_user.id)
                username = result[0]
                await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " + str(username), reply_markup=profile_buttons.startButton)   

        for element in randompass.password_length:
                if message.text == str(element):
                        for elementlength in range(element):
                                randompass.passwords += random.choice(randompass.ally)
                        await message.answer("–í–æ—Ç –≤–∞—à –ø–∞—Ä–æ–ª—å " + str(randompass.passwords))        

        else:
                if db.get_singup(message.from_user.id) == 'setnickname': 
                        if (len(message.text) >= 15):
                                await message.answer("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª–æ–≤")
                        elif (len(message.text) <= 5):
                                await message.answer("–ù–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 5 —Å–∏–º–≤–æ–ª–æ–≤")
                        elif "@" in message.text:
                                await message.answer("–í –Ω–∏–∫–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–∏–º–≤–æ–ª–æ–≤")        
                        else:
                                await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {username}",reply_markup=profile_buttons.startButton)
                                db.updape_username(message.from_user.id, message.text)
                                db.updape_singup(message.from_user.id,'done')  
                               



@dp.callback_query_handler(text = "submonth")
async def submonth(call:types.CallbackQuery):
        await bot.delete_message(call.from_user.id, call.message.message_id)
        await bot.send_invoice(chat_id=call.from_user.id, title="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏", description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", payload="month_sub",provider_token=config.LIQ_PayTOKEN, currency="UAH", start_parameter="test", prices=[{"label": "UAH", "amount": 10000}])

@dp.pre_checkout_query_handler()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def process_pay(message:types.Message):
        if message.successful_payment.invoice_payload == "month_sub":
                time_sub = int(time.time())+ timemenedger.days_to_seconds(30)
                db.updape_time_sub(message.from_user.id, time_sub)
                db.updape_status(message.from_user.id, True)
                await bot.send_message(message.from_user.id, "–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü")        
